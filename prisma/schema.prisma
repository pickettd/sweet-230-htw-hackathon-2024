//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  roles             Role[]
  organizationRoles OrganizationRole[]
  questions         Question[]         @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  dateUpdated    DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id                   String                 @id() @default(uuid())
  name                 String
  pictureUrl           String?                @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId     String?
  dateCreated          DateTime               @default(now())
  dateUpdated          DateTime               @default(now()) @updatedAt()
  roles                OrganizationRole[]
  questions            Question[]             @relation("organization")
  billings             BillingData[]          @relation("organization")
  slackAppInstallation SlackAppInstallation[] @relation("organization")
}

/// @@allow('all', true)
model Question {
  id             String        @id() @default(uuid())
  content        String
  dateAsked      String
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  answers        Answer[]      @relation("question")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Answer {
  id           String    @id() @default(uuid())
  content      String
  dateAnswered String
  questionId   String?
  question     Question? @relation(fields: [questionId], references: [id], name: "question")
  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model BillingData {
  id             String        @id() @default(uuid())
  numberOfUsers  Float
  billingDate    String
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SlackAppInstallation {
  id                              Int           @id() @default(autoincrement())
  clientId                        String?       @map("client_id")
  appId                           String?       @map("app_id")
  enterpriseId                    String?       @map("enterprise_id")
  enterpriseName                  String?       @map("enterprise_name")
  enterpriseUrl                   String?       @map("enterprise_url")
  teamId                          String?       @map("team_id")
  teamName                        String?       @map("team_name")
  botToken                        String?       @map("bot_token")
  botId                           String?       @map("bot_id")
  botUserId                       String?       @map("bot_user_id")
  botScopes                       String?       @map("bot_scopes")
  botRefreshToken                 String?       @map("bot_refresh_token")
  botTokenExpiresAt               DateTime?     @map("bot_token_expires_at")
  userId                          String?       @map("user_id")
  userToken                       String?       @map("user_token")
  userScopes                      String?       @map("user_scopes")
  userRefreshToken                String?       @map("user_refresh_token")
  userTokenExpiresAt              DateTime?     @map("user_token_expires_at")
  incomingWebhookUrl              String?       @map("incoming_webhook_url")
  incomingWebhookChannel          String?       @map("incoming_webhook_channel")
  incomingWebhookChannelId        String?       @map("incoming_webhook_channel_id")
  incomingWebhookConfigurationUrl String?       @map("incoming_webhook_configuration_url")
  isEnterpriseInstall             Boolean       @default(false) @map("is_enterprise_install")
  tokenType                       String        @default("bot") @map("token_type")
  installedAt                     DateTime      @default(now()) @map("installed_at")
  organizationId                  String?
  organization                    Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  dateCreated                     DateTime      @default(now())
  dateUpdated                     DateTime      @default(now()) @updatedAt()

  @@map("slack_app_installation")
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}
